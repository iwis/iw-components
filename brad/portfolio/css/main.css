/* Source code and description: https://www.udemy.com/course/modern-html-css-from-the-beginning/learn/lecture/13875758
 * based on: https://mobirise.com/html-templates/profile/
 *
 * Changed:
 *  - simpler selectors by removing nesting: https://sass-guidelin.es/#selector-nesting
 *  - used btn class besides btn-... classes (BEM standard)
 *  - used "transform: scale(...);" instead of changing dimensions:
 *    https://www.udemy.com/course/modern-html-css-from-the-beginning/learn/lecture/13875776#questions/8116965
 *  - used mixins: iw-circle(), iw-grid-cols(), iw-flex-center(), iw-flex-scatter(), iw-overlay(), and iw-flex-gap() hack
 *  - used Bootstrap color variables: $primary, $gray-100, $gray-800, $border-color
 *  - "grid-gap" changed to "gap"
 *  - order of CSS properties
 *  - formatting
 *  - other smaller changes
 *
 * Todo:
 *  - optionally integrate with iw-utilities
 *  - optionally mobile first
 *  - make a "progress" component
 *  - other
 */
/* If the name of a variable defined in this file isn't prefixed with "iw-", then Bootstrap 4 also defines it.
 * Bootstrap can be imported AFTER the whole iw-components.scss library - it will not overwrite variables,
 * because these variables are defined in Bootstrap using "!default". So here I can change values of variables
 * used both in iw-components and in Bootstrap.
 *
 * The names of the defined functions are prefixed with "iw-" to avoid any clash with functions from other
 * libraries. See https://github.com/necolas/idiomatic-css#preprocessors-additional-format-considerations
 * and https://sass-guidelin.es/#namespace.
 */
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css");
/* usage (from Font Awesome documentation):
 *  in HTML: solid:   <i class="fas fa-camera"></i>
 *           brands:  <i class="fab fa-facebook"></i>
 *  in CSS:
 *    HTML part: <button class="class1"></button>   (button for example)
 *    CSS  part: solid:   .class1::before { font-family: "Font Awesome 5 Free";   content: "\f030"; }
 *               brands:  .class1::before { font-family: "Font Awesome 5 Brands"; content: "\f09a"; }
 *
 * icon modifier classes:
 *   change size: fa-xs   0.75em
                  fa-sm   0.875em
                  fa-lg   1.33em  also applies vertical-align: -25%
                  fa-2x   2em
                  ...     ...
                  fa-10x  10em
 *   rotate/flip: fa-rotate-{90|180|270}
 *                fa-flip-{horizontal|vertical|both}
 *   animate:     fa-spin
 *                fa-pulse
 *                see https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons
 */
/**
 * Creates an isosceles triangle pointing left, right, down, or up, with the given: length, half the width and the color.
 *
 * Example: @include iw-triangle-left(16px, 8px, blue);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add content: "";)
 *  - can be positioned
 * How it works: https://www.youtube.com/watch?v=4cXgXZ3Tf0s
 */
/**
 * Creates a circle with the given color and the size.
 * If size isn't given, it is like if the width and height properties weren't set, thus the circle size
 * comes from its content.
 * Example: @include iw-circle(blue, 16px);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add: content: "";)
 *  - can be positioned
 */
/**
 * Behaves like iw-circle mixin, but additionally prepares the circle for displaying a single character in it (Font Awesome icon,
 * leter, digit etc.) by centering this character.
 *
 * Usage:
 *   <i class="inline fab fa-facebook"></i>
 *
 *   .inline.fab { @include iw-circled-sign(lightgreen, 96px);
 *                 // vertical-align: middle;  // optional
 *                 // font-size: $size/2;      // optional, can be default or for example set by fa-4x for Font Awesome icon
 *               }
 * Source: https://stackoverflow.com/questions/41532908/make-font-awesome-icons-in-a-circle-border-with-right-11-ratio
 * This centering method has been used by Brad Traversy in the "Modern HTML & CSS From The Beginning (Including Sass)" course
 * https://www.udemy.com/course/modern-html-css-from-the-beginning/
 */
/**
 * Use flex to center the child(ren) of the current element along both axes: the main axis and the cross axis.
 * After calling "@include iw-flex-center();":
 *  - optionally set the height and the width of the current element
 *  - optionally set "text-align: center;" to center text inside <p>, <h1> etc.
 *  - optionally set "flex-direction: row;" to lay out children horizontally
 *  - optionally set "flex: none;" on a flex item to not allow to shrink this child along the main axis
 * Todo: add $min argument similarly as in iw-flex-scatter/iw-flex-equal($min)
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is a free space, scatters the children along the main axis and centers them along the cross axis.
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is enough free space, the children will have the same length along the main axis (by using "flex: 1;").
 * Note: The children have "flex-grow: 1", so justify-content has no effect, and iw-flex-center/scatter() should not be used.
 */
/**
 * A simple grid view with the given columns on the given screen and larger [, and the given gap between columns and rows]. On smaller
 * screens, $cols defaults to "none", i.e. as if there were no grid, or the grid had only one column with 1fr/auto width [1], because
 * on smaller screens one column usually looks the best.
 * To obtain different grid layouts for different resolutions you can call the iw-grid-cols() mixin several times with different
 * $min arguments in one CSS rule, for example:
 *   .class1 { @include iw-grid-cols( 768px, 1fr 1fr,     1rem);
 *             @include iw-grid-cols(1200px, 1fr 1fr 1fr, 1rem); }
 *
 * [1] If there is no grid-template-areas property, there is no explicit grid. By default, grid-auto-columns is auto. One auto column
 * behaves as if there were no grid.
 *
 * Examples (with description for screens at least 768px wide):
 *   @include iw-grid-cols(768px, auto 1fr);                - 2 columns: the 1st column width is the width of the longest element in this column
 *   @include iw-grid-cols(768px, fit-content(350px) 1fr);  - 2 columns: the 1st column width is the width of the longest element in this column, but no more than 350px
 *   @include iw-grid-cols(768px, 1fr 2fr);                 - 2 columns with widths: 33.3% and 66.6%
 *   @include iw-grid-cols(768px, 1fr 1fr 1fr);             - 3 columns with equal width
 *   @include iw-grid-cols(768px, auto auto auto auto);     - todo: check
 *
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem);         - with the 1.5rem gap between both rows and columns
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem 1rem);    - with the 1.5rem gap between rows and the 1rem gap between columns
 */
/**
 * (todo: remove when the gap property in flex container will be supported by all web browsers)
 *
 * Sets a space between flex items to $items-gap, and the distance between the flex container and its items to $container-gap.
 *
 * Usage:
 *   .flex-container { display: flex;
 *                     @include iw-flex-gap(1rem, 0.25rem); }
 *
 *   <div class="flex-container [container-xl]">
 *     <div [class="flex-item"]> ... </div>
 *     <div [class="flex-item"]> ... </div>
 *   </div>
 *
 * If needed, the following version can be created: iw-flex-{row|column}-gap($items-gap, $container-gap: 0), to set gaps only between rows or columns.
 *
 * The mixin is a hack, therefore, it has the following disadvantages:
 *  - The minimum $container-gap is $items-gap/2.
 *      See the implementation to understand why.
 *  - It is better to use "box-sizing: border-box;".
 *      If we use the Bootstrap .container-xl utility class with a horizontal padding to restrict the width of a content on a page,
 *      and one of this containers has also the flex-container class with the @include iw-flex-gap(...), then it is better if
 *      "box-sizing: border-box;" is used. Thanks to it, the content of the .container-xl containers, will have the same width.
 *      This oddity results again from the usage of the hack, and won't have a place when all web browsers will implement
 *      the gap property in flex.
 *
 * When all web browser will support the gap property in flex containers https://caniuse.com/#feat=flexbox-gap,
 * then the mixin can be replaced with the following code:
 *   .flex-container { display: flex;
 *                     gap: 1rem;
 *                     margin: 0.25rem; }  // or "padding: 0.25rem;" if the container has a border or a background color
 * As of July 2020 we still wait at least for Safari:
 *   https://www.chromestatus.com/feature/6031643502444544
 *   https://b.webkit.org/show_bug.cgi?id=206767
 *
 * Other flex gap hacks can be found here: https://stackoverflow.com/questions/20626685/better-way-to-set-distance-between-flexbox-items
 */
/**
 * Creates an overlay over the parent element with the given background color and opacity (less than 1).
 * The parent element needs to be positioned (i.e. not static).
 * See: https://www.w3schools.com/howto/howto_css_overlay.asp
 * Used in "Modern HTML & CSS From The Beginning (Including Sass)" course by Brad Traversy, for example in portfolio website.
 *
 * Example usage:
 *   .class1        { position: relative; }
 *   .class1::after { @include iw-overlay(black, 0.9); }
 */
/**
 * Use absolute positioning and the transform property to center the CURRENT element both vertically and horizonatally
 * within the closest positioned (i.e. not static) ancestor, if any; or the whole document, otherwise.
 * Of course, the current element is removed from the normal document flow, so no space is created for the current
 * element in the page layout.
 */
.container {
  margin: auto;
  padding: 0 1.5rem;
  max-width: 1280px;
  overflow: hidden;
}

.btn {
  display: inline-block;
  -webkit-transition: all 0.5s;
  transition: all 0.5s;
  border: none;
  padding: 0.8rem 2rem;
  cursor: pointer;
}

.btn:hover {
  background: #ffbc00;
}

.btn-light {
  background: #f4f4f4;
  color: #333;
}

.btn-dark {
  background: #333;
  color: #f4f4f4;
}

.bg-primary {
  background: #ffbc00;
  color: white;
}

.bg-light {
  background: #f4f4f4;
  color: #212529;
}

.bg-dark {
  background: #333;
  color: white;
}

.lead {
  margin-bottom: 2rem;
  font-size: 1.3rem;
}

.text-center {
  text-align: center;
}

.my-2 {
  margin: 2rem 0;
}

.py-2 {
  padding: 2rem 0;
}

.py-3 {
  padding: 3rem 0;
}

.py-4 {
  padding: 4rem 0;
}

.section-title {
  display: block;
  padding-bottom: 0.5rem;
  font-size: 2rem;
  font-weight: 100;
  text-align: center;
  text-transform: uppercase;
}

.bottom-line {
  display: block;
  margin: 0 auto 1rem;
  background: #ffbc00;
  width: 3rem;
  height: 2px;
}

/* Style for gallery on work.html page
 *
 * Changes:
 *  - removed unnecessary code, for example, as suggested in comments:
 *     1) all three ".item-image[...]" selectors were replaced by:
 *          .item-image     { transition: transform 750ms $item-timing; }
 *          .item-image img { display: block; }
 *     2) content of the .item-text div is centered using flex instead of:
 *          top: 50%;
 *          transform: translateY(-50%);
 *        and thus unnecessary .item-text-wrap div has been removed both from HTML and CSS
 *  - used iw-overlay() mixin
 *  - other smaller changes
 */
/* stylelint-disable order/properties-order */
.items {
  display: -ms-grid;
  display: grid;
  gap: 0;
  -webkit-box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
          box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
}

@media (min-width: 501px) {
  .items {
    -ms-grid-columns: (1fr)[3];
        grid-template-columns: repeat(3, 1fr);
  }
}

.item {
  position: relative;
  overflow: hidden;
}

.item::after {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  display: block;
  opacity: 0.9;
  background: #ffbc00;
  content: "";
  -webkit-transition: -webkit-transform 3s cubic-bezier(0.2, 1, 0.3, 1);
  transition: -webkit-transform 3s cubic-bezier(0.2, 1, 0.3, 1);
  transition: transform 3s cubic-bezier(0.2, 1, 0.3, 1);
  transition: transform 3s cubic-bezier(0.2, 1, 0.3, 1), -webkit-transform 3s cubic-bezier(0.2, 1, 0.3, 1);
  -webkit-transform: scale(2) translate(-75%, -75%) rotate(-28deg);
          transform: scale(2) translate(-75%, -75%) rotate(-28deg);
}

.item:hover::after {
  -webkit-transform: scale(2) translate(0, 0) rotate(-28deg);
          transform: scale(2) translate(0, 0) rotate(-28deg);
}

.item:hover .item-image {
  -webkit-transform: scale(1.2);
          transform: scale(1.2);
}

.item:hover .item-text {
  opacity: 1;
  -webkit-transform: translateY(0);
          transform: translateY(0);
}

.item-image {
  -webkit-transition: -webkit-transform 750ms cubic-bezier(0.2, 1, 0.3, 1);
  transition: -webkit-transform 750ms cubic-bezier(0.2, 1, 0.3, 1);
  transition: transform 750ms cubic-bezier(0.2, 1, 0.3, 1);
  transition: transform 750ms cubic-bezier(0.2, 1, 0.3, 1), -webkit-transform 750ms cubic-bezier(0.2, 1, 0.3, 1);
}

.item-image img {
  display: block;
}

.item-text {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 1;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  text-align: center;
  color: white;
  -webkit-transition: all 500ms cubic-bezier(0.2, 1, 0.3, 1) 300ms;
  transition: all 500ms cubic-bezier(0.2, 1, 0.3, 1) 300ms;
  opacity: 0;
  -webkit-transform: translateY(-20%);
          transform: translateY(-20%);
}

.item-text-category {
  opacity: 0.7;
  font-size: 1.2rem;
  text-transform: uppercase;
}

.item-text-title {
  margin-top: 5px;
  padding: 0 1rem;
  font-size: 2rem;
}

* {
  margin: 0;
  padding: 0;
}

body {
  background: white;
  font-family: "Dosis", sans-serif;
  line-height: 1.6;
}

a {
  color: #333;
  text-decoration: none;
}

ul {
  list-style: none;
}

h2, h3, h4 {
  text-transform: uppercase;
}

img {
  width: 100%;
}

#main-nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding-top: 1rem;
}

@media (min-width: 501px) {
  #main-nav {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
  }
}

#main-nav #logo {
  width: 70px;
  height: 70px;
  color: white;
  text-transform: uppercase;
}

#main-nav ul {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

#main-nav li {
  padding: 1rem;
}

#main-nav a {
  -webkit-transition: border-color 0.5s;
  transition: border-color 0.5s;
  border-bottom: 3px transparent solid;
  padding-bottom: 0.5rem;
  color: white;
  text-decoration: none;
  text-transform: uppercase;
}

#main-nav a:hover {
  border-color: #ccc;
}

#main-nav a.current {
  border-color: #ffbc00;
}

#header-home {
  background: url("../img/showcase.jpg") no-repeat center right/cover;
  height: 100vh;
  color: white;
}

#header-home .header-content {
  padding-top: 20%;
  text-align: center;
}

#header-home .header-content h1 {
  font-size: 4rem;
  line-height: 1.2;
}

#header-inner {
  border-bottom: 3px solid #ffbc00;
  background: url("../img/showcase.jpg") no-repeat 20% 30%/cover;
  height: 5.5rem;
}

#home-a .specials {
  display: -ms-grid;
  display: grid;
  gap: 1rem;
  display: grid;
  gap: 1rem;
  margin-top: 3rem;
}

@media (min-width: 501px) {
  #home-a .specials {
    -ms-grid-columns: (1fr)[2];
        grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 769px) {
  #home-a .specials {
    -ms-grid-columns: (1fr)[4];
        grid-template-columns: repeat(4, 1fr);
  }
}

#home-a .specials .fas {
  padding-bottom: 0.4rem;
  color: #ffbc00;
}

#home-b .stats {
  display: -ms-grid;
  display: grid;
  gap: 0;
}

@media (min-width: 501px) {
  #home-b .stats {
    -ms-grid-columns: (1fr)[4];
        grid-template-columns: repeat(4, 1fr);
  }
}

#home-b .stats li {
  line-height: 2;
}

#home-b .stats li.stats-title {
  font-size: 1.5rem;
}

#home-b .stats li.stats-number {
  font-size: 2rem;
  font-weight: bold;
}

#home-b .stats div {
  padding: 3rem 0;
}

#home-b .stats div:nth-child(odd) {
  background: #f4f4f4;
}

#home-b .stats div:nth-child(even) {
  background: #ccc;
}

#home-c .process {
  display: -ms-grid;
  display: grid;
  gap: 1.5rem;
  text-align: center;
}

@media (min-width: 501px) {
  #home-c .process {
    -ms-grid-columns: (1fr)[4];
        grid-template-columns: repeat(4, 1fr);
  }
}

#home-c .process-icon {
  position: relative;
  -webkit-transition: all 1s;
  transition: all 1s;
  border-radius: 50%;
  background-color: #333;
  width: 70px;
  height: 70px;
  line-height: 70px;
  text-align: center;
  padding: 2rem;
  color: white;
}

#home-c .process-step {
  position: absolute;
  right: 0;
  top: 0;
  -webkit-transition: all 1s;
  transition: all 1s;
  border-radius: 50%;
  background-color: #ffbc00;
  width: 15px;
  height: 15px;
  line-height: 15px;
  text-align: center;
  padding: 1rem;
  font-size: 28px;
}

#home-c .process-icon:hover {
  -webkit-transform: scale(1.15);
          transform: scale(1.15);
  background: #ffbc00;
}

#home-c .process-icon:hover .process-step {
  -webkit-transform: scale(0.85);
          transform: scale(0.85);
  background: #333;
}

#about-a .about-info {
  display: -ms-grid;
  display: grid;
  gap: 1.2rem;
}

@media (min-width: 501px) {
  #about-a .about-info {
    -ms-grid-columns: (1fr)[3];
        grid-template-columns: repeat(3, 1fr);
  }
}

#about-a .bio {
  border-left: 3px solid #ffbc00;
  padding: 0.8rem;
}

#about-a .award .fas {
  margin: 1rem;
  color: #ffbc00;
}

#about-b .progress {
  margin-bottom: 0.6rem;
  border-radius: 0.3rem;
  background: #ccc;
  height: 20px;
  overflow: hidden;
}

#about-b .progress div {
  background: #ffbc00;
  height: 100%;
}

#about-c .about-logos {
  display: -ms-grid;
  display: grid;
  gap: 2rem;
}

@media (min-width: 501px) {
  #about-c .about-logos {
    -ms-grid-columns: (1fr)[4];
        grid-template-columns: repeat(4, 1fr);
  }
}

#about-c .about-logos img {
  width: 70%;
}

#about-d .testimonials {
  display: -ms-grid;
  display: grid;
  gap: 0.5rem;
  display: grid;
  gap: 0.5rem;
}

@media (min-width: 501px) {
  #about-d .testimonials {
    -ms-grid-columns: (1fr)[2];
        grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 769px) {
  #about-d .testimonials {
    -ms-grid-columns: (1fr)[4];
        grid-template-columns: repeat(4, 1fr);
  }
}

#about-d .testimonials p {
  border: 1px solid #ccc;
  border-radius: 0.3rem;
  padding: 0.5rem;
}

#about-d .testimonials ul {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  margin-top: 1rem;
  list-style: none;
}

#about-d .testimonials img {
  margin-right: 0.5rem;
  border-radius: 50%;
  background-color: transparent;
  width: 50px;
  height: 50px;
}

#contact-a .text-fields {
  display: -ms-grid;
  display: grid;
  gap: 1.2rem;
  margin-bottom: 1.2rem;
}

@media (min-width: 501px) {
  #contact-a .text-fields {
    -ms-grid-columns: (1fr)[2];
        grid-template-columns: repeat(2, 1fr);
  }
}

#contact-a .message-input {
  height: 100px;
  resize: vertical;
}

#contact-a .text-input {
  padding: 0.5rem 1rem;
}

#contact-a .btn[type="submit"] {
  width: 50%;
}

#contact-b .contact-info {
  display: -ms-grid;
  display: grid;
  gap: 0;
  text-align: center;
}

@media (min-width: 501px) {
  #contact-b .contact-info {
    -ms-grid-columns: (1fr)[3];
        grid-template-columns: repeat(3, 1fr);
  }
}

#contact-c h1 {
  font-size: 4rem;
  text-align: center;
}

#main-footer {
  background: #333;
  color: white;
}

#main-footer .footer-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding: 0.7rem;
}

@media (min-width: 501px) {
  #main-footer .footer-content {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
  }
}

#main-footer .footer-content > * {
  margin: 0.5rem;
}

#main-footer .social .fab {
  margin-right: 1rem;
  border-radius: 50%;
  background-color: transparent;
  width: 20px;
  height: 20px;
  line-height: 20px;
  text-align: center;
  border: 2px white solid;
  padding: 0.5rem;
}

#main-footer .social .fab:hover {
  background: #ffbc00;
}

@media (min-width: 501px) {
  #main-nav {
    -webkit-box-align: stretch;
        -ms-flex-align: stretch;
            align-items: stretch;
  }
  #main-nav li {
    padding: 1rem 1.5rem;
  }
  #about-a .bio,
  #contact-a .message-input {
    grid-column: span 2;
  }
  #contact-a .subject-input {
    -ms-grid-row: 2;
    grid-row: 2;
  }
}

@media (max-width: 800px) {
  #header-home {
    height: 30rem;
  }
  #header-home .header-content {
    padding-top: 5rem;
  }
}

@media (max-width: 500px) {
  #header-home {
    border-bottom: 3px solid #ffbc00;
    background-position: 20% 30%;
    height: 10rem;
  }
  #header-home .header-content {
    display: none;
  }
  #header-inner {
    height: 10rem;
  }
  #home-a .specials div:not(:last-child) {
    border-bottom: 1px #f4f4f4 solid;
    padding-bottom: 1rem;
  }
  #home-b .stats div {
    padding: 2rem 0 1rem;
  }
  #about-c {
    display: none;
  }
  #contact-b div:not(:last-child) {
    margin-bottom: 1rem;
    border-bottom: 1px #555 solid;
    padding-bottom: 1rem;
  }
  #contact-c h1 {
    font-size: 2rem;
  }
}

@media (max-height: 580px) {
  #header-home .header-content {
    padding-top: 3rem;
  }
}

@media (max-height: 330px) {
  #header-home .header-content h1 {
    font-size: 2rem;
  }
}
/*# sourceMappingURL=main.css.map */