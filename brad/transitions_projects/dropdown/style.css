/* Changes:
 *  - used Sass: color variables from Bootstrap, iw-flex-center() mixin
 *  - formatting
 * Todo:
 *  - change to BEM component - it needs to be integrated with iw-navbar and maybe with iw-nav
 *                              see also Bootstrap's .nav-item and .dropdown
 *  - write iw-badge component and then use it
 */
/* If the name of a variable defined in this file isn't prefixed with "iw-", then Bootstrap 4 also defines it.
 * Bootstrap can be imported AFTER the whole iw-components.scss library - it will not overwrite variables,
 * because these variables are defined in Bootstrap using "!default". So here I can change values of variables
 * used both in iw-components and in Bootstrap.
 *
 * The names of the defined functions are prefixed with "iw-" to avoid any clash with functions from other
 * libraries. See https://github.com/necolas/idiomatic-css#preprocessors-additional-format-considerations
 * and https://sass-guidelin.es/#namespace.
 */
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css");
/* usage (from Font Awesome documentation):
 *  in HTML: solid:   <i class="fas fa-camera"></i>
 *           brands:  <i class="fab fa-facebook"></i>
 *  in CSS:
 *    HTML part: <button class="class1"></button>   (button for example)
 *    CSS  part: solid:   .class1::before { font-family: "Font Awesome 5 Free";   content: "\f030"; }
 *               brands:  .class1::before { font-family: "Font Awesome 5 Brands"; content: "\f09a"; }
 *
 * icon modifier classes:
 *   change size: fa-xs   0.75em
                  fa-sm   0.875em
                  fa-lg   1.33em  also applies vertical-align: -25%
                  fa-2x   2em
                  ...     ...
                  fa-10x  10em
 *   rotate/flip: fa-rotate-{90|180|270}
 *                fa-flip-{horizontal|vertical|both}
 *   animate:     fa-spin
 *                fa-pulse
 *                see https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons
 */
/**
 * Creates an isosceles triangle pointing left, right, down, or up, with the given: length, half the width and the color.
 *
 * Example: @include iw-triangle-left(16px, 8px, blue);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add content: "";)
 *  - can be positioned
 * How it works: https://www.youtube.com/watch?v=4cXgXZ3Tf0s
 */
/**
 * Creates a circle with the given color and the size.
 * If size isn't given, it is like if the width and height properties weren't set, thus the circle size
 * comes from its content.
 * Example: @include iw-circle(blue, 16px);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add: content: "";)
 *  - can be positioned
 */
/**
 * Behaves like iw-circle mixin, but additionally prepares the circle for displaying a single character in it (Font Awesome icon,
 * leter, digit etc.) by centering this character.
 *
 * Usage:
 *   <i class="inline fab fa-facebook"></i>
 *
 *   .inline.fab { @include iw-circled-sign(lightgreen, 96px);
 *                 // vertical-align: middle;  // optional
 *                 // font-size: $size/2;      // optional, can be default or for example set by fa-4x for Font Awesome icon
 *               }
 * Source: https://stackoverflow.com/questions/41532908/make-font-awesome-icons-in-a-circle-border-with-right-11-ratio
 * This centering method has been used by Brad Traversy in the "Modern HTML & CSS From The Beginning (Including Sass)" course
 * https://www.udemy.com/course/modern-html-css-from-the-beginning/
 */
/**
 * Use flex to center the child(ren) of the current element along both axes: the main axis and the cross axis.
 * After calling "@include iw-flex-center();":
 *  - optionally set the height and the width of the current element
 *  - optionally set "text-align: center;" to center text inside <p>, <h1> etc.
 *  - optionally set "flex-direction: row;" to lay out children horizontally
 *  - optionally set "flex: none;" on a flex item to not allow to shrink this child along the main axis
 * Todo: add $min argument similarly as in iw-flex-scatter/iw-flex-equal($min)
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is a free space, scatters the children along the main axis and centers them along the cross axis.
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is enough free space, the children will have the same length along the main axis (by using "flex: 1;").
 * Note: The children have "flex-grow: 1", so justify-content has no effect, and iw-flex-center/scatter() should not be used.
 */
/**
 * A simple grid view with the given columns on the given screen and larger [, and the given gap between columns and rows]. On smaller
 * screens, $cols defaults to "none", i.e. as if there were no grid, or the grid had only one column with 1fr/auto width [1], because
 * on smaller screens one column usually looks the best.
 * To obtain different grid layouts for different resolutions you can call the iw-grid-cols() mixin several times with different
 * $min arguments in one CSS rule, for example:
 *   .class1 { @include iw-grid-cols( 768px, 1fr 1fr,     1rem);
 *             @include iw-grid-cols(1200px, 1fr 1fr 1fr, 1rem); }
 *
 * [1] If there is no grid-template-areas property, there is no explicit grid. By default, grid-auto-columns is auto. One auto column
 * behaves as if there were no grid.
 *
 * Examples (with description for screens at least 768px wide):
 *   @include iw-grid-cols(768px, auto 1fr);                - 2 columns: the 1st column width is the width of the longest element in this column
 *   @include iw-grid-cols(768px, fit-content(350px) 1fr);  - 2 columns: the 1st column width is the width of the longest element in this column, but no more than 350px
 *   @include iw-grid-cols(768px, 1fr 2fr);                 - 2 columns with widths: 33.3% and 66.6%
 *   @include iw-grid-cols(768px, 1fr 1fr 1fr);             - 3 columns with equal width
 *   @include iw-grid-cols(768px, auto auto auto auto);     - todo: check
 *
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem);         - with the 1.5rem gap between both rows and columns
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem 1rem);    - with the 1.5rem gap between rows and the 1rem gap between columns
 */
/**
 * (todo: remove when the gap property in flex container will be supported by all web browsers)
 *
 * Sets a space between flex items to $items-gap, and the distance between the flex container and its items to $container-gap.
 *
 * Usage:
 *   .flex-container { display: flex;
 *                     @include iw-flex-gap(1rem, 0.25rem); }
 *
 *   <div class="flex-container [container-xl]">
 *     <div [class="flex-item"]> ... </div>
 *     <div [class="flex-item"]> ... </div>
 *   </div>
 *
 * If needed, the following version can be created: iw-flex-{row|column}-gap($items-gap, $container-gap: 0), to set gaps only between rows or columns.
 *
 * The mixin is a hack, therefore, it has the following disadvantages:
 *  - The minimum $container-gap is $items-gap/2.
 *      See the implementation to understand why.
 *  - It is better to use "box-sizing: border-box;".
 *      If we use the Bootstrap .container-xl utility class with a horizontal padding to restrict the width of a content on a page,
 *      and one of this containers has also the flex-container class with the @include iw-flex-gap(...), then it is better if
 *      "box-sizing: border-box;" is used. Thanks to it, the content of the .container-xl containers, will have the same width.
 *      This oddity results again from the usage of the hack, and won't have a place when all web browsers will implement
 *      the gap property in flex.
 *
 * When all web browser will support the gap property in flex containers https://caniuse.com/#feat=flexbox-gap,
 * then the mixin can be replaced with the following code:
 *   .flex-container { display: flex;
 *                     gap: 1rem;
 *                     margin: 0.25rem; }  // or "padding: 0.25rem;" if the container has a border or a background color
 * As of July 2020 we still wait at least for Safari:
 *   https://www.chromestatus.com/feature/6031643502444544
 *   https://b.webkit.org/show_bug.cgi?id=206767
 *
 * Other flex gap hacks can be found here: https://stackoverflow.com/questions/20626685/better-way-to-set-distance-between-flexbox-items
 */
/**
 * Creates an overlay over the parent element with the given background color and opacity (less than 1).
 * The parent element needs to be positioned (i.e. not static).
 * See: https://www.w3schools.com/howto/howto_css_overlay.asp
 * Used in "Modern HTML & CSS From The Beginning (Including Sass)" course by Brad Traversy, for example in portfolio website.
 *
 * Example usage:
 *   .class1        { position: relative; }
 *   .class1::after { @include iw-overlay(black, 0.9); }
 */
/**
 * Use absolute positioning and the transform property to center the CURRENT element both vertically and horizonatally
 * within the closest positioned (i.e. not static) ancestor, if any; or the whole document, otherwise.
 * Of course, the current element is removed from the normal document flow, so no space is created for the current
 * element in the page layout.
 */
:root {
  --primary-color: coral;
  --secondary-color: chocolate;
}

* {
  margin: 0;
  padding: 0;
}

html,
body {
  background: #f8f9fa;
  font-family: Arial, Helvetica, sans-serif;
}

#navbar ul {
  list-style: none;
}

#navbar ul li {
  position: relative;
  display: inline-block;
  padding: 1rem;
  color: #343a40;
}

#navbar ul li a {
  color: #343a40;
  text-decoration: none;
}

#navbar ul li:hover {
  background: var(--primary-color);
  color: white;
  cursor: pointer;
}

#navbar ul li:hover a {
  color: white;
}

#navbar ul li ul {
  display: none;
}

#navbar ul li:hover ul {
  position: absolute;
  left: 0;
  display: block;
  margin-top: 1rem;
  width: 200px;
}

#navbar ul li:hover ul li {
  display: block;
  background: #e9ecef;
}

#navbar ul li:hover ul li a {
  color: #343a40;
}

#navbar ul li:hover ul li:hover {
  background: #dee2e6;
  color: inherit;
}

#navbar ul li:hover ul li span {
  float: right;
  border-radius: 0.3rem;
  background: var(--primary-color);
  padding: 0.2rem 0.5rem;
  color: white;
  font-size: 0.8rem;
  text-align: center;
}

#navbar ul li:hover ul li:hover span {
  background: var(--secondary-color);
}

@media (max-width: 600px) {
  #navbar ul li {
    display: block;
  }
  #navbar ul li:hover ul {
    position: relative;
    width: 100%;
  }
}
#showcase {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: var(--primary-color);
  padding: 0 2rem;
  height: 300px;
  text-align: center;
}

#showcase h1 {
  color: white;
  font-size: 4rem;
}/*# sourceMappingURL=style.css.map */