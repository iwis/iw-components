/* Hamburger menu overlay using only CSS without JavaScript.
 * Code source: https://www.udemy.com/course/modern-html-css-from-the-beginning/learn/lecture/13285580
 *
 * The code was simplified by:
 *  - using the iw-flex-center() and iw-circle() mixins
 *  - using Sass selector nesting
 *  - removing some not required flex properties described in Q&A for lesson "81. Hamburger Menu Overlay [2] - Creating The Hamburger"
 *  - changing formatting
 *  - adding comments
 *  - other changes
 *
 * Todo:
 *  - BEM
 *  - now the hamburger isn't accessible
 *  - the hamburger HTML and CSS code can be simplified by using "appearance: none;" as in iw-form-custom-togglers.scss
 */
/* If the name of a variable defined in this file isn't prefixed with "iw-", then Bootstrap 4 also defines it.
 * Bootstrap can be imported AFTER the whole iw-components.scss library - it will not overwrite variables,
 * because these variables are defined in Bootstrap using "!default". So here I can change values of variables
 * used both in iw-components and in Bootstrap.
 *
 * The names of the defined functions are prefixed with "iw-" to avoid any clash with functions from other
 * libraries. See https://github.com/necolas/idiomatic-css#preprocessors-additional-format-considerations
 * and https://sass-guidelin.es/#namespace.
 */
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css");
/* usage (from Font Awesome documentation):
 *  in HTML: solid:   <i class="fas fa-camera"></i>
 *           brands:  <i class="fab fa-facebook"></i>
 *  in CSS:
 *    HTML part: <button class="class1"></button>   (button for example)
 *    CSS  part: solid:   .class1::before { font-family: "Font Awesome 5 Free";   content: "\f030"; }
 *               brands:  .class1::before { font-family: "Font Awesome 5 Brands"; content: "\f09a"; }
 *
 * icon modifier classes:
 *   change size: fa-xs   0.75em
                  fa-sm   0.875em
                  fa-lg   1.33em  also applies vertical-align: -25%
                  fa-2x   2em
                  ...     ...
                  fa-10x  10em
 *   rotate/flip: fa-rotate-{90|180|270}
 *                fa-flip-{horizontal|vertical|both}
 *   animate:     fa-spin
 *                fa-pulse
 *                see https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons
 */
/**
 * Creates an isosceles triangle pointing left, right, down, or up, with the given: length, half the width and the color.
 *
 * Example: @include iw-triangle-left(16px, 8px, blue);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add content: "";)
 *  - can be positioned
 * How it works: https://www.youtube.com/watch?v=4cXgXZ3Tf0s
 */
/**
 * Creates a circle with the given color and the size.
 * If size isn't given, it is like if the width and height properties weren't set, thus the circle size
 * comes from its content.
 * Example: @include iw-circle(blue, 16px);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add: content: "";)
 *  - can be positioned
 */
/**
 * Behaves like iw-circle mixin, but additionally prepares the circle for displaying a single character in it (Font Awesome icon,
 * leter, digit etc.) by centering this character.
 *
 * Usage:
 *   <i class="inline fab fa-facebook"></i>
 *
 *   .inline.fab { @include iw-circled-sign(lightgreen, 96px);
 *                 // vertical-align: middle;  // optional
 *                 // font-size: $size/2;      // optional, can be default or for example set by fa-4x for Font Awesome icon
 *               }
 * Source: https://stackoverflow.com/questions/41532908/make-font-awesome-icons-in-a-circle-border-with-right-11-ratio
 * This centering method has been used by Brad Traversy in the "Modern HTML & CSS From The Beginning (Including Sass)" course
 * https://www.udemy.com/course/modern-html-css-from-the-beginning/
 */
/**
 * Use flex to center the child(ren) of the current element along both axes: the main axis and the cross axis.
 * After calling "@include iw-flex-center();":
 *  - optionally set the height and the width of the current element
 *  - optionally set "text-align: center;" to center text inside <p>, <h1> etc.
 *  - optionally set "flex-direction: row;" to lay out children horizontally
 *  - optionally set "flex: none;" on a flex item to not allow to shrink this child along the main axis
 * Todo: add $min argument similarly as in iw-flex-scatter/iw-flex-equal($min)
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is a free space, scatters the children along the main axis and centers them along the cross axis.
 */
/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is enough free space, the children will have the same length along the main axis (by using "flex: 1;").
 * Note: The children have "flex-grow: 1", so justify-content has no effect, and iw-flex-center/scatter() should not be used.
 */
/**
 * A simple grid view with the given columns on the given screen and larger [, and the given gap between columns and rows]. On smaller
 * screens, $cols defaults to "none", i.e. as if there were no grid, or the grid had only one column with 1fr/auto width [1], because
 * on smaller screens one column usually looks the best.
 * To obtain different grid layouts for different resolutions you can call the iw-grid-cols() mixin several times with different
 * $min arguments in one CSS rule, for example:
 *   .class1 { @include iw-grid-cols( 768px, 1fr 1fr,     1rem);
 *             @include iw-grid-cols(1200px, 1fr 1fr 1fr, 1rem); }
 *
 * [1] If there is no grid-template-areas property, there is no explicit grid. By default, grid-auto-columns is auto. One auto column
 * behaves as if there were no grid.
 *
 * Examples (with description for screens at least 768px wide):
 *   @include iw-grid-cols(768px, auto 1fr);                - 2 columns: the 1st column width is the width of the longest element in this column
 *   @include iw-grid-cols(768px, fit-content(350px) 1fr);  - 2 columns: the 1st column width is the width of the longest element in this column, but no more than 350px
 *   @include iw-grid-cols(768px, 1fr 2fr);                 - 2 columns with widths: 33.3% and 66.6%
 *   @include iw-grid-cols(768px, 1fr 1fr 1fr);             - 3 columns with equal width
 *   @include iw-grid-cols(768px, auto auto auto auto);     - todo: check
 *
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem);         - with the 1.5rem gap between both rows and columns
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem 1rem);    - with the 1.5rem gap between rows and the 1rem gap between columns
 */
/**
 * Creates an overlay over the parent element with the given background color and opacity (less than 1).
 * The parent element needs to be positioned (i.e. not static).
 * See: https://www.w3schools.com/howto/howto_css_overlay.asp
 * Used in "Modern HTML & CSS From The Beginning (Including Sass)" course by Brad Traversy, for example in portfolio website.
 *
 * Example usage:
 *   .class1        { position: relative; }
 *   .class1::after { @include iw-overlay(black, 0.9); }
 */
/**
 * Use absolute positioning and the transform property to center the CURRENT element both vertically and horizonatally
 * within the closest positioned (i.e. not static) ancestor, if any; or the whole document, otherwise.
 * Of course, the current element is removed from the normal document flow, so no space is created for the current
 * element in the page layout.
 */
.menu-wrap {
  position: fixed;
  left: 0;
  top: 0;
  z-index: 1;
}
.menu-wrap .toggler {
  position: absolute;
  left: 0;
  top: 0;
  opacity: 0;
  z-index: 2;
  width: 50px;
  height: 50px;
  cursor: pointer;
}
.menu-wrap .hamburger {
  position: absolute;
  left: 0;
  top: 0;
  z-index: 1;
  background: var(--primary-color);
  padding: 1rem;
  width: 60px;
  height: 60px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.menu-wrap .hamburger > div {
  position: relative;
  transition: all 0.4s;
  background: white;
  width: 100%;
  height: 2px;
}
.menu-wrap .hamburger > div::before,
.menu-wrap .hamburger > div::after {
  position: absolute;
  z-index: 1;
  background: inherit;
  width: 100%;
  height: 2px;
  content: "";
}
.menu-wrap .hamburger > div::before {
  top: -10px;
}
.menu-wrap .hamburger > div::after {
  top: 10px;
}
.menu-wrap .toggler:checked + .hamburger > div::before,
.menu-wrap .toggler:checked + .hamburger > div::after {
  transform: rotate(90deg);
  top: 0;
}
.menu-wrap .toggler:checked + .hamburger > div {
  transform: rotate(135deg);
}
.menu-wrap .toggler:checked:hover + .hamburger > div {
  transform: rotate(225deg);
}
.menu-wrap .menu {
  position: fixed;
  left: 0;
  top: 0;
  visibility: hidden;
  width: 100%;
  height: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.menu-wrap .menu-overlay {
  flex: none;
  transform: scale(0);
  transition: all 0.4s;
  border-radius: 50%;
  background-color: var(--overlay-color);
  width: 200vw;
  height: 200vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.menu-wrap .menu-container {
  transition: opacity 0.4s;
  opacity: 0;
  max-width: 90vw;
  max-height: 100vh;
  text-align: center;
}
.menu-wrap .menu-container > ul > li {
  padding: 1rem;
  list-style: none;
  color: white;
  font-size: 1.5rem;
}
.menu-wrap .menu-container > ul > li > a {
  transition: color 0.4s;
  color: inherit;
  text-decoration: none;
}
.menu-wrap .menu-container > ul > li > a:hover {
  color: var(--secondary-color);
}
.menu-wrap .toggler:checked ~ .menu {
  visibility: visible;
}
.menu-wrap .toggler:checked ~ .menu .menu-overlay {
  transform: scale(1);
  transition-duration: 0.75s;
}
.menu-wrap .toggler:checked ~ .menu .menu-container {
  opacity: 1;
  transition-delay: 0.4s;
}/*# sourceMappingURL=menu.css.map */