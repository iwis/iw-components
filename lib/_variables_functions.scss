@use 'sass:math';

/* If the name of a variable defined in this file isn't prefixed with "iw-", then Bootstrap 4 also defines it.
 * Bootstrap can be imported AFTER the whole iw-components.scss library - it will not overwrite variables,
 * because these variables are defined in Bootstrap using "!default". So here I can change values of variables
 * used both in iw-components and in Bootstrap.
 *
 * The names of the defined functions are prefixed with "iw-" to avoid any clash with functions from other
 * libraries. See https://github.com/necolas/idiomatic-css#preprocessors-additional-format-considerations
 * and https://sass-guidelin.es/#namespace.
 */

// ------------------------------- Colors -------------------------------------

// Bootstrap grays (with a blue-ish tint). Source: bootstrap\scss\_variables.scss
$gray-100: #f8f9fa !default;  // ~ hsl(210, 15%, 98%)
$gray-200: #e9ecef !default;  // ~ hsl(210, 15%, 93%)
$gray-300: #dee2e6 !default;  // ~ hsl(210, 14%, 89%)
$gray-400: #ced4da !default;  // ~ hsl(210, 14%, 83%)
$gray-500: #adb5bd !default;  // ~ hsl(210, 11%, 71%)
$gray-600: #6c757d !default;  // ~ hsl(210,  7%, 46%)
$gray-700: #495057 !default;  // ~ hsl(210,  9%, 31%)
$gray-800: #343a40 !default;  // ~ hsl(210, 10%, 23%)
$gray-900: #212529 !default;  // ~ hsl(210, 11%, 15%)

$primary:   #007bff !default;  // ~ hsl(210, 100%, 50%); can be set before importing this file
$secondary: $gray-600 !default;  // can be set before importing this file

// Bootstrap theme colors. Source: bootstrap\scss\_variables.scss
$theme-colors: ("primary":   $primary,
                "secondary": $secondary,
                "success":   #28a745, // ~ hsl(134,  61%, 41%)
                "warning":   #ffc107, // ~ hsl( 45, 100%, 51%)
                "danger":    #dc3545, // ~ hsl(354,  70%, 54%)
                "info":      #17a2b8, // ~ hsl(188,  78%, 41%)
                "light":     $gray-100,
                "dark":      $gray-800);

// Get theme color with the given name. Based on: https://getbootstrap.com/docs/4.4/getting-started/theming/; Bootstrap function (unmodified)
@function iw-theme-color($color-name: "primary") { @return map-get($theme-colors, $color-name); }

// Get the particular level (belonging to <-12.5, 12.5>) of theme color with the given name.
// $level > 0 => darken the color, $level < 0 => lighten the color.
// Based on: https://getbootstrap.com/docs/4.4/getting-started/theming/
// Bootstrap function (unmodified)
// Recommended also on: https://sass-guidelin.es/#lightening-and-darkening-colors
@function iw-theme-color-level($color-name: "primary", $level: 0) {
  @return mix(if($level > 0, #000, #fff), iw-theme-color($color-name), abs($level) * 8%);
}

// If given $color is dark then returns white color. If given $color is light then returns $body-color (which is dark).
// Useful for setting foreground color, depending on background color - both colors will have big contrast.
// Used in iw-btn. Source: Bootstrap. Bootstrap function (modified)
@function iw-color-yiq($color) {
  // YIQ lightness Y value (from 0 to 255) - it is more perceptually relevant than the lightness() function, which
  // returns: (max($R, $G, $B) + min($R, $G, $B)) / 2 / 255, where $R: red($color); $G: green($color); $B: blue($color);
  // see https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness
  $yiq: math.div((red($color) * 299) + (green($color) * 587) + (blue($color) * 114), 1000);

  @if ($yiq >= 150) { @return $body-color; }
  @else             { @return white;     }
}

// -------------------- Common values of components properties ---------------------
// based on: bootstrap\scss\_variables.scss

$body-color:       $gray-900;           // used by: iw-page, iw-btn

$border-color:     $gray-300 !default;  // used by: iw-nav, iw-table, iw-form; can be set before importing this file

$border-radius:    .25rem;              // used by: iw-nav, iw-alert
$border-radius-lg: .3rem;               // used by: iw-page__section, iw-form
$border-radius-sm: .2rem;

// used by: iw-btn
$link-color:            iw-theme-color("primary");
$link-hover-color:      darken($link-color, 15%);
$link-decoration:       none;
$link-hover-decoration: underline;

// -------------------- Utilities ---------------------

$displays: none, inline, inline-block, block, table, table-row, table-cell, flex, inline-flex;

// grid breakpoints (minimum dimensions at which layout will change, adapting
// to different screen sizes, for use in media queries)
$grid-breakpoints: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px);

// -------------------- Icons ---------------------

// Font Awesome 5.12.1; source of links: https://cdnjs.com/libraries/font-awesome
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/fontawesome.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/brands.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/solid.min.css");

/* usage (from Font Awesome documentation):
 *  in HTML: solid:   <i class="fas fa-camera"></i>
 *           brands:  <i class="fab fa-facebook"></i>
 *  in CSS:
 *    HTML part: <button class="class1"></button>   (button for example)
 *    CSS  part: solid:   .class1::before { font-family: "Font Awesome 5 Free";   content: "\f030"; }
 *               brands:  .class1::before { font-family: "Font Awesome 5 Brands"; content: "\f09a"; }
 *
 * icon modifier classes:
 *   change size: fa-xs   0.75em
                  fa-sm   0.875em
                  fa-lg   1.33em  also applies vertical-align: -25%
                  fa-2x   2em
                  ...     ...
                  fa-10x  10em
 *   rotate/flip: fa-rotate-{90|180|270}
 *                fa-flip-{horizontal|vertical|both}
 *   animate:     fa-spin
 *                fa-pulse
 *                see https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons
 */

// -------------------- Shapes ---------------------

/**
 * Creates an isosceles triangle pointing left, right, down, or up, with the given: length, half the width and the color.
 *
 * Example: @include iw-triangle-left(16px, 8px, blue);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add content: "";)
 *  - can be positioned
 * How it works: https://www.youtube.com/watch?v=4cXgXZ3Tf0s
 */
 @mixin iw-triangle-down($length, $half-width, $color) {
  border-left:   $half-width solid transparent;
  border-right:  $half-width solid transparent;
  border-top:    $length     solid $color;
  border-bottom: 0           solid transparent;
  width:  0;
  height: 0;
}

@mixin iw-triangle-up($length, $half-width, $color) {
  border-left:   $half-width solid transparent;
  border-right:  $half-width solid transparent;
  border-top:    0           solid transparent;
  border-bottom: $length     solid $color;
  width:  0;
  height: 0;
}

@mixin iw-triangle-left($length, $half-width, $color) {
  border-left:   0           solid transparent;
  border-right:  $length     solid $color;
  border-top:    $half-width solid transparent;
  border-bottom: $half-width solid transparent;
  width:  0;
  height: 0;
}

@mixin iw-triangle-right($length, $half-width, $color) {
  border-left:   $length     solid $color;
  border-right:  0           solid transparent;
  border-top:    $half-width solid transparent;
  border-bottom: $half-width solid transparent;
  width:  0;
  height: 0;
}

/**
 * Creates a circle with the given color and the size.
 * If size isn't given, it is like if the width and height properties weren't set, thus the circle size
 * comes from its content.
 * Example: @include iw-circle(blue, 16px);
 * Usage:
 *  - can be included in an element, or in a ::before/::after pseudo-element (then add: content: "";)
 *  - can be positioned
 */
@mixin iw-circle($color, $size: auto) {
  border-radius: 50%;
  background-color: $color;
  width:  $size;
  height: $size;
}

/**
 * Behaves like iw-circle mixin, but additionally prepares the circle for displaying a single character in it (Font Awesome icon,
 * leter, digit etc.) by centering this character.
 *
 * Usage:
 *   <i class="inline fab fa-facebook"></i>
 *
 *   .inline.fab { @include iw-circled-sign(lightgreen, 96px);
 *                 // vertical-align: middle;  // optional
 *                 // font-size: $size/2;      // optional, can be default or for example set by fa-4x for Font Awesome icon
 *               }
 * Source: https://stackoverflow.com/questions/41532908/make-font-awesome-icons-in-a-circle-border-with-right-11-ratio
 * This centering method has been used by Brad Traversy in the "Modern HTML & CSS From The Beginning (Including Sass)" course
 * https://www.udemy.com/course/modern-html-css-from-the-beginning/
 */
@mixin iw-circled-sign($color, $size: auto) {
  @include iw-circle($color, $size);

  // center the sign
  line-height: $size;
  text-align: center;
}

// -------------------- Common use cases of a group of flex/grid properties ---------------------
// Some popular effects require to combine several flex/grid properties. The following mixins can be used to achieve such effects.

/**
 * Use flex to center the child(ren) of the current element along both axes: the main axis and the cross axis.
 * After calling "@include iw-flex-center();":
 *  - optionally set the height and the width of the current element
 *  - optionally set "text-align: center;" to center text inside <p>, <h1> etc.
 *  - optionally set "flex-direction: row;" to lay out children horizontally
 *  - optionally set "flex: none;" on a flex item to not allow to shrink this child along the main axis
 * Todo: add $min argument similarly as in iw-flex-scatter/iw-flex-equal($min)
 */
@mixin iw-flex-center() {
  display: flex;
  flex-direction: column;

  justify-content: center;          // center items along main axis
  align-items: center;              // center items along cross axis
}

/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is a free space, scatters the children along the main axis and centers them along the cross axis.
 */
@mixin iw-flex-scatter($min) {
  display: flex;
  flex-direction: column;
  @media (min-width: $min) {
    flex-direction: row;
  }

  justify-content: space-between;   // separate items along main axis
  align-items: center;              // center all items along cross axis
}

/**
 * Uses flex to lay out the children of the current element vertically by default, and horizontally on the given screen and larger.
 * If there is enough free space, the children will have the same length along the main axis (by using "flex: 1;").
 * Note: The children have "flex-grow: 1", so justify-content has no effect, and iw-flex-center/scatter() should not be used.
 */
@mixin iw-flex-equal($min) {
  display: flex;
  flex-direction: column;
  @media (min-width: $min) {
    flex-direction: row;
  }

  > * { flex: 1; }                  // flex items have the same size
}

/**
 * A simple grid view with the given columns on the given screen and larger [, and the given gap between columns and rows]. On smaller
 * screens, $cols defaults to "none", i.e. as if there were no grid, or the grid had only one column with 1fr/auto width [1], because
 * on smaller screens one column usually looks the best.
 * To obtain different grid layouts for different resolutions you can call the iw-grid-cols() mixin several times with different
 * $min arguments in one CSS rule, for example:
 *   .class1 { @include iw-grid-cols( 768px, 1fr 1fr,     1rem);
 *             @include iw-grid-cols(1200px, 1fr 1fr 1fr, 1rem); }
 *
 * [1] If there is no grid-template-areas property, there is no explicit grid. By default, grid-auto-columns is auto. One auto column
 * behaves as if there were no grid.
 *
 * Examples (with description for screens at least 768px wide):
 *   @include iw-grid-cols(768px, auto 1fr);                - 2 columns: the 1st column width is the width of the longest element in this column
 *   @include iw-grid-cols(768px, fit-content(350px) 1fr);  - 2 columns: the 1st column width is the width of the longest element in this column, but no more than 350px
 *   @include iw-grid-cols(768px, 1fr 2fr);                 - 2 columns with widths: 33.3% and 66.6%
 *   @include iw-grid-cols(768px, 1fr 1fr 1fr);             - 3 columns with equal width
 *   @include iw-grid-cols(768px, auto auto auto auto);     - todo: check
 *
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem);         - with the 1.5rem gap between both rows and columns
 *   @include iw-grid-cols(768px, 5fr 2fr, 1.5rem 1rem);    - with the 1.5rem gap between rows and the 1rem gap between columns
 */
@mixin iw-grid-cols($min, $cols, $gap: 0) {
  display: grid;
  gap: $gap;

  @media (min-width: $min) {
    grid-template-columns: $cols;
  }
}

// -------------------- Other mixins ---------------------

/**
 * Creates an overlay over the parent element with the given background color and opacity (less than 1).
 * The parent element needs to be positioned (i.e. not static).
 * See: https://www.w3schools.com/howto/howto_css_overlay.asp
 * Used in "Modern HTML & CSS From The Beginning (Including Sass)" course by Brad Traversy, for example in portfolio website.
 *
 * Example usage:
 *   .class1        { position: relative; }
 *   .class1::after { @include iw-overlay(black, 0.9); }
 */
@mixin iw-overlay($background-color, $opacity) {
  // cover the whole parent element
  position: absolute;
  left: 0; right: 0; top: 0; bottom: 0;  // or: left: 0; top: 0; width: 100%; height: 100%;

  display: block;                 // useful for ::after which is inline by default

  opacity: $opacity;              // a little transparent
  background: $background-color;

  content: "";                    // required for ::after
}

/**
 * Use absolute positioning and the transform property to center the CURRENT element both vertically and horizonatally
 * within the closest positioned (i.e. not static) ancestor, if any; or the whole document, otherwise.
 * Of course, the current element is removed from the normal document flow, so no space is created for the current
 * element in the page layout.
 */
@mixin iw-absolute-center() {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
